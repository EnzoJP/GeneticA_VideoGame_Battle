"""
Enhanced console interface with better formatting and user experience
"""

import os
import sys
import time
from datetime import datetime
import combat.enemy as enemy
import combat.party as party
import combat.combat as combat


class Colors:
    """ANSI color codes for terminal output"""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def clear_screen():
    """Clear the console screen"""
    os.system('cls' if os.name == 'nt' else 'clear')


def print_banner():
    """Print an enhanced banner"""
    banner = f"""
{Colors.HEADER}{Colors.BOLD}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    GeneticA VideoGame Battle - Persona 3                     ‚ïë
‚ïë                                                                              ‚ïë
‚ïë           Algoritmos Gen√©ticos para vencer al jefe 'Sleeping Table'         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.ENDC}"""
    print(banner)


def print_menu():
    """Print an enhanced menu"""
    menu = f"""
{Colors.OKBLUE}{Colors.BOLD}üéÆ MEN√ö PRINCIPAL {Colors.ENDC}
{Colors.OKCYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.ENDC}

{Colors.OKGREEN}1.{Colors.ENDC} {Colors.BOLD}üéØ Iniciar Combate Manual{Colors.ENDC}
   Juega el combate paso a paso, eligiendo las acciones de cada personaje

{Colors.OKGREEN}2.{Colors.ENDC} {Colors.BOLD}ü§ñ Simular Combate con IA{Colors.ENDC}
   Ejecuta simulaciones autom√°ticas usando algoritmos gen√©ticos

{Colors.OKGREEN}3.{Colors.ENDC} {Colors.BOLD}üìä Ver Informaci√≥n del Sistema{Colors.ENDC}
   Muestra detalles sobre los algoritmos y personajes

{Colors.OKGREEN}4.{Colors.ENDC} {Colors.BOLD}‚ùå Salir{Colors.ENDC}
   Cierra la aplicaci√≥n

{Colors.OKCYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.ENDC}
"""
    print(menu)


def print_simulation_menu():
    """Print the simulation algorithm selection menu"""
    menu = f"""
{Colors.OKBLUE}{Colors.BOLD}ü§ñ SELECCI√ìN DE ALGORITMO {Colors.ENDC}
{Colors.OKCYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.ENDC}

{Colors.OKGREEN}1.{Colors.ENDC} {Colors.BOLD}üé≤ Algoritmo Aleatorio{Colors.ENDC}
   Selecciona acciones al azar (l√≠nea base)

{Colors.OKGREEN}2.{Colors.ENDC} {Colors.BOLD}üß¨ Algoritmo Gen√©tico B√°sico{Colors.ENDC}
   Implementaci√≥n est√°ndar del algoritmo gen√©tico

{Colors.OKGREEN}3.{Colors.ENDC} {Colors.BOLD}üß¨+ Algoritmo Gen√©tico Modificado{Colors.ENDC}
   Versi√≥n mejorada adaptada al problema

{Colors.OKGREEN}4.{Colors.ENDC} {Colors.BOLD}üî¨ NSGA-II{Colors.ENDC}
   Algoritmo gen√©tico multi-objetivo

{Colors.OKGREEN}5.{Colors.ENDC} {Colors.BOLD}üìä Comparar Todos los Algoritmos{Colors.ENDC}
   Ejecuta todos los algoritmos y compara resultados

{Colors.OKGREEN}6.{Colors.ENDC} {Colors.BOLD}üîô Volver al Men√∫ Principal{Colors.ENDC}

{Colors.OKCYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.ENDC}
"""
    print(menu)


def print_info():
    """Print system information"""
    info = f"""
{Colors.OKBLUE}{Colors.BOLD}üìä INFORMACI√ìN DEL SISTEMA {Colors.ENDC}
{Colors.OKCYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.ENDC}

{Colors.BOLD}üë• Personajes del Partido:{Colors.ENDC}
‚Ä¢ Makoto (Protagonista) - L√≠der del grupo
‚Ä¢ Yukari - Especialista en viento y curaci√≥n  
‚Ä¢ Akihiko - Combatiente cuerpo a cuerpo
‚Ä¢ Junpei - Atacante con fuego

{Colors.BOLD}üëπ Enemigo:{Colors.ENDC}
‚Ä¢ Sleeping Table - Jefe final con m√∫ltiples habilidades

{Colors.BOLD}üß¨ Algoritmos Disponibles:{Colors.ENDC}
‚Ä¢ {Colors.OKGREEN}Aleatorio:{Colors.ENDC} L√≠nea base para comparaciones
‚Ä¢ {Colors.OKGREEN}Gen√©tico B√°sico:{Colors.ENDC} Implementaci√≥n est√°ndar del algoritmo gen√©tico
‚Ä¢ {Colors.OKGREEN}Gen√©tico Modificado:{Colors.ENDC} Versi√≥n optimizada para este problema
‚Ä¢ {Colors.OKGREEN}NSGA-II:{Colors.ENDC} Algoritmo multi-objetivo para optimizaci√≥n avanzada

{Colors.BOLD}üìà M√©tricas Evaluadas:{Colors.ENDC}
‚Ä¢ Tasa de victoria (%)
‚Ä¢ Promedio de turnos por combate
‚Ä¢ Da√±o realizado y recibido
‚Ä¢ Tiempo de ejecuci√≥n
‚Ä¢ N√∫mero de muertes en el partido

{Colors.OKCYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.ENDC}
"""
    print(info)


def get_user_input(prompt, valid_options):
    """Get user input with validation"""
    while True:
        try:
            choice = input(f"{Colors.BOLD}{prompt}{Colors.ENDC}").strip()
            if choice in valid_options:
                return choice
            else:
                print(f"{Colors.FAIL}‚ùå Opci√≥n inv√°lida. Por favor, elige una opci√≥n v√°lida: {', '.join(valid_options)}{Colors.ENDC}")
        except KeyboardInterrupt:
            print(f"\n{Colors.WARNING}‚ö†Ô∏è  Operaci√≥n cancelada por el usuario{Colors.ENDC}")
            return None
        except EOFError:
            print(f"\n{Colors.WARNING}‚ö†Ô∏è  Fin de entrada detectado{Colors.ENDC}")
            return None


def get_simulation_config():
    """Get simulation configuration from user"""
    print(f"\n{Colors.OKBLUE}{Colors.BOLD}‚öôÔ∏è  CONFIGURACI√ìN DE SIMULACI√ìN{Colors.ENDC}")
    print(f"{Colors.OKCYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.ENDC}")
    
    # Number of simulations
    while True:
        try:
            n_sim = input(f"{Colors.BOLD}N√∫mero de simulaciones por algoritmo (default: 10): {Colors.ENDC}").strip()
            if not n_sim:
                n_sim = 10
                break
            n_sim = int(n_sim)
            if n_sim > 0:
                break
            else:
                print(f"{Colors.FAIL}‚ùå Por favor, ingresa un n√∫mero positivo{Colors.ENDC}")
        except ValueError:
            print(f"{Colors.FAIL}‚ùå Por favor, ingresa un n√∫mero v√°lido{Colors.ENDC}")
    
    # Save plots
    save_plots = get_user_input("¬øGuardar gr√°ficos? (y/n, default: n): ", ['y', 'n', 'Y', 'N', ''])
    if save_plots is None:
        return None, None
    save_plots = save_plots.lower() == 'y'
    
    return n_sim, save_plots


def run_with_progress(func, description):
    """Run a function with a simple progress indicator"""
    print(f"\n{Colors.OKBLUE}üîÑ {description}...{Colors.ENDC}")
    
    import threading
    import time
    
    # Progress animation
    def animate():
        chars = "|/-\\"
        idx = 0
        while not stop_animation:
            print(f"\r{Colors.OKCYAN}{chars[idx % len(chars)]} Procesando...{Colors.ENDC}", end='', flush=True)
            idx += 1
            time.sleep(0.1)
    
    stop_animation = False
    animation_thread = threading.Thread(target=animate)
    animation_thread.daemon = True
    animation_thread.start()
    
    try:
        result = func()
        return result
    finally:
        stop_animation = True
        animation_thread.join(timeout=0.1)
        print(f"\r{Colors.OKGREEN}‚úÖ {description} completado{Colors.ENDC}" + " " * 20)


def enhanced_console_interface():
    """Run the enhanced console interface"""
    # Initialize game objects
    sleeping_table = enemy.Enemy()
    Makoto = party.Makoto()
    Yukari = party.Yukari()
    Akihiko = party.Akihiko()
    Junpei = party.Junpei()
    party_list = [Makoto, Yukari, Akihiko, Junpei]
    
    while True:
        clear_screen()
        print_banner()
        print_menu()
        
        choice = get_user_input("üëâ Selecciona una opci√≥n (1-4): ", ['1', '2', '3', '4'])
        
        if choice is None:  # User interrupted
            break
        elif choice == '1':
            print(f"\n{Colors.OKGREEN}üéØ Iniciando combate manual...{Colors.ENDC}")
            print("Presiona Enter para continuar...")
            input()
            
            def start_combat():
                combat.start_combat(party_list, sleeping_table)
            
            run_with_progress(start_combat, "Ejecutando combate manual")
            
            print(f"\n{Colors.OKGREEN}‚úÖ Combate completado{Colors.ENDC}")
            input("Presiona Enter para continuar...")
            
        elif choice == '2':
            while True:
                clear_screen()
                print_banner()
                print_simulation_menu()
                
                sim_choice = get_user_input("üëâ Selecciona un algoritmo (1-6): ", ['1', '2', '3', '4', '5', '6'])
                
                if sim_choice is None or sim_choice == '6':
                    break
                    
                # Get simulation configuration
                n_sim, save_plots = get_simulation_config()
                if n_sim is None:
                    continue
                
                print(f"\n{Colors.OKBLUE}üöÄ Iniciando simulaci√≥n...{Colors.ENDC}")
                start_time = time.time()
                
                if sim_choice == '5':  # Compare all algorithms
                    def run_comparison():
                        combat.compare_all_algorithms(n_sim, save_plots)
                    
                    run_with_progress(run_comparison, "Comparando todos los algoritmos")
                else:
                    def run_single_sim():
                        combat.simulate_combat(party_list, sleeping_table)
                    
                    algorithm_names = {
                        '1': 'Algoritmo Aleatorio',
                        '2': 'Algoritmo Gen√©tico B√°sico', 
                        '3': 'Algoritmo Gen√©tico Modificado',
                        '4': 'NSGA-II'
                    }
                    
                    run_with_progress(run_single_sim, f"Ejecutando {algorithm_names[sim_choice]}")
                
                end_time = time.time()
                print(f"\n{Colors.OKGREEN}‚è±Ô∏è  Tiempo total de ejecuci√≥n: {end_time - start_time:.2f} segundos{Colors.ENDC}")
                print(f"\n{Colors.OKGREEN}‚úÖ Simulaci√≥n completada{Colors.ENDC}")
                input("Presiona Enter para continuar...")
                
        elif choice == '3':
            clear_screen()
            print_banner()
            print_info()
            input("\nPresiona Enter para continuar...")
            
        elif choice == '4':
            print(f"\n{Colors.OKGREEN}üëã ¬°Gracias por usar GeneticA VideoGame Battle!{Colors.ENDC}")
            print(f"{Colors.OKCYAN}Hasta la vista, baby! ü§ñ{Colors.ENDC}")
            break


if __name__ == "__main__":
    enhanced_console_interface()